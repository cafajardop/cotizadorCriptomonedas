{"version":3,"sources":["cryptomonedas.png","components/Error.js","hooks/useMoneda.js","hooks/useCriptomoneda.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MensajeError","styled","p","Error","mensaje","Label","label","Select","select","useMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","map","opcion","key","codigo","nombre","useCriptomoneda","CoinInfo","Id","Name","FullName","Boton","input","Formulario","guardarMoneda","guardarCriptomoneda","listacripto","guardarCriptomonedas","error","guardarError","moneda","SelectMonedas","criptomoneda","SelectCripto","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","className","Contenedor","Imagen","img","Heading","h1","App","guardarResultado","cargando","guardarCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","src","imagen","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.eff8286d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst MensajeError = styled.p`\r\n    background-color: #b7322c;\r\n    padding: 1rem;\r\n    color:#FFF;\r\n    font-size: 30px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <MensajeError>{mensaje}</MensajeError>\r\n     );\r\n}\r\n \r\nexport default Error;","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 1rem;\r\n  -webkit-appearance: none;\r\n  border-radius: 10px;\r\n  border: none;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst useMoneda = (label, stateInicial, opciones) => {\r\n  // State de nuestro custom hook\r\n  const [state, actualizarState] = useState(stateInicial);\r\n\r\n  const Seleccionar = () => (\r\n    <Fragment>\r\n      <Label>{label}</Label>\r\n      <Select \r\n        onChange={e => actualizarState(e.target.value)} \r\n        value={state}\r\n        >\r\n        <option value=\"\">- Seleccione -</option>\r\n        {opciones.map(opcion => (\r\n          <option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\r\n        ))}\r\n      </Select>\r\n    </Fragment>\r\n  );\r\n\r\n  // Retornar state, interfaz y fn que modifica el state\r\n  return [state, Seleccionar, actualizarState];\r\n};\r\n\r\nexport default useMoneda;","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n  font-family: 'Bebas Neue', cursive;\r\n  color:#FFF;\r\n  text-transform:uppercase;\r\n  font-weight: bold;\r\n  font-size: 2.4rem;\r\n  margin-top:2rem;\r\n  display:block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  width: 100%;\r\n  display:block;\r\n  padding:1rem;\r\n  -webkit-appearance:none;\r\n  border-radius: 10px;\r\n  border:none;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst useCriptomoneda = (label, stateInicial, opciones) => {\r\n    // State de nuestro custom hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n\r\n  const SelectCripto = () => (\r\n    <Fragment>\r\n      <Label>{label}</Label>\r\n      <Select\r\n        onChange={e => actualizarState(e.target.value)}\r\n        value={state}\r\n      >\r\n        <option value=\"\">- Seleccione -</option>\r\n        {opciones.map(opcion =>(\r\n          <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\r\n        ))}\r\n      </Select>\r\n    </Fragment>\r\n  );\r\n\r\n  // Retornar state, interfaz y fn que modifica el state \r\n  return [state, SelectCripto, actualizarState];\r\n}\r\n\r\nexport default useCriptomoneda;","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nimport Error from \"./Error\";\r\nimport useMoneda from \"../hooks/useMoneda\";\r\nimport useCriptomoneda from \"../hooks/useCriptomoneda\";\r\nimport axios from \"axios\";\r\n\r\nconst Boton = styled.input`\r\n  margin-top: 20px;\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n  padding: 10px;\r\n  background-color: #66a2fe;\r\n  border: none;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  color: #fff;\r\n  transition: background-color 0.3s ease;\r\n\r\n  &:hover {\r\n    background-color: #326ac0;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Formulario = ({guardarMoneda,guardarCriptomoneda}) => {\r\n  // state del listado de criptomonedas\r\n  const [listacripto, guardarCriptomonedas] = useState([]);\r\n  const [error, guardarError] = useState(false);\r\n\r\n  const MODENAS = [\r\n    { codigo: \"COP\", nombre: \"Peso Colombiano\" },    \r\n    { codigo: \"USD\", nombre: \"Dolar de Estados Unidos\" },\r\n    { codigo: \"MXN\", nombre: \"Peso Mexicano\" },\r\n    { codigo: \"EUR\", nombre: \"Euro\" },\r\n    { codigo: \"GBP\", nombre: \"Libra Esterlina\" },\r\n  ];\r\n\r\n  // Ultilizar useMoneda\r\n  const [moneda, SelectMonedas] = useMoneda(\"Elige tu Moneda\", \"\", MODENAS);\r\n\r\n  // Utilizar useCriptomoneda\r\n  const [criptomoneda, SelectCripto] = useCriptomoneda(\"Elige tu Criptomoneda\",\"\",listacripto);\r\n\r\n  // Ejecutar llamado a la API\r\n  useEffect(() => {\r\n    const consultarAPI = async () => {\r\n      const url =\r\n        \"https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD\";\r\n\r\n      const resultado = await axios.get(url);\r\n\r\n      guardarCriptomonedas(resultado.data.Data);\r\n    };\r\n    consultarAPI();\r\n  }, []);\r\n\r\n  // Cuando el usuario hace submit\r\n  const cotizarMoneda = (e) => {\r\n    e.preventDefault();\r\n    // Validar si ambos campos estan llenos\r\n    if (moneda === \"\" || criptomoneda === \"\") {\r\n      guardarError(true);\r\n      return;\r\n    }\r\n\r\n    // Pasar los datos al componente principal\r\n    guardarError(false);\r\n    guardarMoneda(moneda);\r\n    guardarCriptomoneda(criptomoneda);\r\n  };\r\n  return (\r\n    <form onSubmit={cotizarMoneda}>\r\n      \r\n      {error ? <Error mensaje=\"Todos los campos son obligatorios\"/> : null}\r\n\r\n      <SelectMonedas />\r\n      <SelectCripto />\r\n      <Boton type=\"submit\" value=\"Calcular\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst ResultadoDiv = styled.div `\r\n    color: #FFF;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n`;\r\n\r\nconst Info = styled.p`\r\n    font-size: 18px;\r\n    span{\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nconst Precio = styled.p`\r\n    font-size: 30px;\r\n    span{\r\n        font-weight: bold;\r\n    }\r\n`\r\n\r\n\r\nconst Cotizacion = ({resultado}) => {\r\n    if(Object.keys(resultado).length === 0) return null;\r\n\r\n    return ( \r\n        <ResultadoDiv>\r\n            <Precio>El precio es :<span>{resultado.PRICE}</span></Precio>\r\n            <Info>Precio mas alto del día :<span>{resultado.HIGHDAY}</span></Info>\r\n            <Info>Precio más bajo del dia :<span>{resultado.LOWDAY}</span></Info>\r\n            <Info>Variación últimas 24 horas :<span>{resultado.CHANGEPCT24HOUR}</span></Info>\r\n            <Info>última Actualización :<span>{resultado.LASTUPDATE}</span></Info>\r\n        </ResultadoDiv>\r\n     );\r\n}\r\n \r\nexport default Cotizacion;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n        <div className=\"sk-chase\">\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>            \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, { useState, useEffect } from \"react\";\nimport styled from \"@emotion/styled\";\nimport imagen from \"./cryptomonedas.png\";\nimport axios from \"axios\";\nimport Formulario from \"./components/Formulario\";\nimport Cotizacion from \"./components/Cotizacion\";\nimport Spinner from \"./components/Spinner\";\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width: 992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after {\n    content: \"\";\n    width: 150px;\n    height: 6px;\n    background-color: #66a2fe;\n    display: block;\n  }\n`;\n\nfunction App() {\n  const [moneda, guardarMoneda] = useState('');\n  const [criptomoneda, guardarCriptomoneda] = useState('');\n  const [resultado, guardarResultado] = useState({});\n  const [cargando, guardarCargando] = useState(false);\n\n  useEffect(() => {\n    const cotizarCriptomoneda = async () => {\n      // evitamos la ejecucion la primera vez\n      if (moneda === '') return;\n      // Consultar la api para obtener la cotizacion\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n      \n      const resultado = await axios.get(url);\n\n      // Mostrar el spinner\n      guardarCargando(true);\n\n      // Con settimeOut ocultar el spinner y mostrar el resultado\n      setTimeout(()=> {\n        // cambiar el estado de cargando \n        guardarCargando(false);\n        \n        // guardar contizacion\n        guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n      }, 3000);\n    };\n\n    cotizarCriptomoneda();\n\n  }, [moneda, criptomoneda]);\n  \n  // Mostrar spinner o resultado\n  const componente = (cargando) ? <Spinner/> : <Cotizacion resultado={resultado}/>\n  \n  return (\n    <Contenedor>\n      <div>\n        <Imagen src={imagen} alt=\"imagen cripto\" />\n      </div>\n      <div>\n        <Heading>Cotiza Criptomonedas al Instante Carlos Fajardo</Heading>\n        <Formulario\n          guardarMoneda={guardarMoneda}\n          guardarCriptomoneda={guardarCriptomoneda}\n        />\n        {componente}\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}